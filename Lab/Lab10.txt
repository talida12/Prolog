:-dynamic neighbor/2.
:-dynamic gen_edge/2.
:-dynamic gen_node/1.
:-dynamic sol_part/2.
:-dynamic gen_neighb_list/2.
:-dynamic node/1.
:-dynamic edge_ex1/2.

neighbor(a, [b,d]).
neighbor(b, [a,c,d]).
neighbor(c, [b,d]).

neighb_to_edge :- 
    	%extrage un predicat neighbor 
    	retract(neighbor(Node,List)), !,
    	% si apoi il proceseaza 
    	process(Node,List), 
    	neighb_to_edge.
neighb_to_edge.

gen_node(Node) :-
    assertz(node(Node)).
gen_edge(Node1, Node2) :-
    assertz(edge(Node1, Node2)).


process(Node,[H|T]) :- assertz(gen_edge(Node,H)), process(Node, T).
process(Node,[]) :- assertz(gen_node(Node)).

is_edge(a,b).
is_edge(a,d).
is_edge(b,a).
is_edge(b,c).
is_edge(b,d).
is_edge(c,b).
is_edge(c,d).
path(X,Y,Path) :- path(X,Y,[X],Path).
path(Y,Y,PPath,PPath).
path(X,Y,PPath,FPath) :-
    is_edge(X,Z), 
    not(member(Z,PPath)), 
    path(Z,Y,[Z|PPath],FPath).

%restricted_path(Source,Target,RestrictionsList,Path)
restricted_path(X,Y,LR,P) :-
    path(X,Y,P), 
    reverse(P,PR), 
    check_restrictions(LR,PR).
check_restrictions([],_) :- !.
check_restrictions([H|T],[H|R]) :- !, check_restrictions(T,R).
check_restrictions(T,[_|L]) :- check_restrictions(T,L).


%Ex1 - edge clause - neighbor list clause
node(a).
node(b).
node(c).
node(d).
edge_ex1(a,b).
edge_ex1(a,c).
edge_ex1(b,d).

edge_to_neighb :- 
    	%extrage un predicat node
    	retract(node(Node)), !,
    	% si apoi il proceseaza 
    	process_ex1(Node,[]), 
    	edge_to_neighb.
edge_to_neighb.

process_ex1(Node1,NodesList) :- 
    retract(edge_ex1(Node1,Node2)), 
    !, 
    NodesListNew = [Node2|NodesList],
    process_ex1(Node1,NodesListNew).
process_ex1(Node,NodesList) :- assert(gen_neighb_list(Node,NodesList)).

%2 Ciclu hamiltonian=trece prin toate nodurile o singura data
%lungime = nr de noduri - 1

edge_ex2(a,b).
edge_ex2(b,c).
edge_ex2(a,c).
edge_ex2(c,d).
edge_ex2(b,d).
edge_ex2(d,e).
edge_ex2(e,a).

hamilton(NN,X,Path) :- NN1 is NN - 1, hamilton_path(NN1,X,X,[X],Path).
hamilton_path(0,X,Y,PPath,[Y|PPath]) :- edge_ex2(X,Y).
hamilton_path(NN,X,Y,PPath,Path) :-
    edge_ex2(X,Z), 
    not(member(Z,PPath)), 
    NN1 is NN - 1, 
    hamilton_path(NN1,Z,Y,[Z|PPath],Path).

%4 - optimal path cu ponderi 
edge_ex4(a,c,7).
edge_ex4(a,b,10).
edge_ex4(c,d,3).
edge_ex4(b,e,1).
edge_ex4(d,e,2).

optimal_weighted_path(X,Y,Path):-
    asserta(sol_part([],100)), 
    path(X,Y,[X],Path,0).
optimal_weighted_path(_,_,Path) :-
    retract(sol_part(Path,_)).
path(Y,Y,Path,Path,LPath):-
    %scoatem ultima solutie 
    retract(sol_part(_,_)), !, 
    asserta(sol_part(Path,LPath)), 
    %cautam alta solutie
    fail.
path(X,Y,PPath,FPath,LPath):-
    edge_ex4(X,Z,P), 
	not(member(Z,PPath)), 
    LPath1 is LPath + P, 
    sol_part(_,Lopt),
    LPath1 < Lopt, 
    path(Z,Y,[Z|PPath],FPath,LPath1).

%5 - reprezentarea edge 
edge_ex5(a,b).
edge_ex5(a,c).
edge_ex5(c,e).
edge_ex5(e,a).
edge_ex5(b,d).
edge_ex5(d,a).

cycle(X,Path) :- cycle(X,X,[X],Path).
cycle(X,X,PPath,PPath) :-
    length(PPath, L), L > 1, !.
cycle(X,Y,PPath,Path) :-
    edge_ex5(X,Z),
    cycle(Z,Y,[Z|PPath],Path).

%6 cycle - reprezentarea neighbor 
neighb_ex6(a, [b,c]).
neighb_ex6(b, [d]).
neighb_ex6(c, [e]).
neighb_ex6(d, [a]).
neighb_ex6(e, [a]).

cycle_neighb(X,Path) :-
    cycle_neighb(X,X,[X],Path).
cycle_neighb(X,X,PPath,PPath) :- 
    length(PPath, L), L > 1, !.
cycle_neighb(X,Y,PPath,Path) :- 
    neighb_ex6(X,List),
    member(Z,List), 
    cycle_neighb(Z,Y,[Z|PPath],Path).

%7 drum eulerian
edge_ex7(a,b).
edge_ex7(b,e).
edge_ex7(c,a).
edge_ex7(d,c).
edge_ex7(e,d).

euler(NE,X,Path) :- euler_path(NE,X,X,[X],Path).
%euler_path(0,X,Y,PPath,[Y|PPath]) :- edge_ex2(X,Y).
% Base case: If we reach the destination node Y and have visited all edges, return the path.
euler_path(_, X, Y, PPath, [Y|PPath]) :-
    edge_ex7(X, Y),
    not(member(Y, PPath)).
% Recursive case: Find the next node Z connected to X and continue the path recursively.
euler_path(NE, X, Y, PPath, Path) :-
    NE > 0, 
    edge_ex7(X, Z),  
    not(member(Z, PPath)),  
    NE1 is NE - 1,  
    euler_path(NE1, Z, Y, [Z|PPath], Path). 

        
             
    